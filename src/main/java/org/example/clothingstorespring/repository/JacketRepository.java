package org.example.clothingstorespring.repository;


import org.example.clothingstorespring.model.Jacket;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
//JpaRepository — это интерфейс, предоставляемый Spring Data JPA, который расширяет базовые CRUD-операции и предоставляет дополнительные возможности для работы с базой данных. Когда вы наследуетесь от JpaRepository, вы получаете доступ к множеству готовых методов для работы с сущностями, таких как:
//
//save(T entity): Сохраняет данную сущность (или обновляет, если сущность с таким идентификатором уже существует).
//findById(ID id): Находит сущность по её идентификатору.
//findAll(): Возвращает список всех сущностей.
//deleteById(ID id): Удаляет сущность по её идентификатору.

//Преимущества использования JpaRepository
//Простота: Вы можете сосредоточиться на бизнес-логике, не беспокоясь о низкоуровневых деталях работы с базой данных.
//Гибкость: Вы можете легко добавлять свои собственные методы в интерфейс репозитория, если стандартные методы не удовлетворяют вашим требованиям.
//Поддержка различных баз данных: Spring Data JPA поддерживает множество баз данных и автоматически генерирует SQL-запросы в зависимости от используемой базы данных.
@Repository
public interface JacketRepository extends JpaRepository<Jacket, Long> {

}
//В выражении <Jacket, Long> в интерфейсе JacketRepository, который расширяет JpaRepository, используется дженерики (обобщенные типы) для указания типа сущности и типа идентификатора

//Jacket:
//Это тип сущности, с которой будет работать ваш репозиторий. В данном случае, это класс Jacket, который представляет модель данных для куртки.
//Spring Data JPA будет использовать этот класс для создания таблицы в базе данных и для выполнения операций CRUD (создание, чтение, обновление, удаление).

//Long:
//Это тип идентификатора (ID) сущности. В данном случае, Long указывает, что идентификатор для сущности Jacket будет иметь тип Long.
//Идентификатор обычно используется для уникального определения каждой записи в таблице базы данных.

//Как это работает
//Когда вы создаете интерфейс репозитория, указывая <Jacket, Long>, вы сообщаете Spring Data JPA, что:Этот репозиторий будет выполнять операции с сущностью Jacket.
//Каждая сущность Jacket будет иметь уникальный идентификатор типа Long.

//Преимущества использования дженериков:
//Типобезопасность: Используя дженерики, вы получаете проверку типов на этапе компиляции. Это уменьшает вероятность ошибок, связанных с неправильным использованием типов.
//Упрощение кода:
// Вам не нужно явно указывать типы объектов в методах репозитория.